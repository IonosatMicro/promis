#!/usr/bin/env python3
from math import ( pi, sin, cos, asin, acos, sqrt)
import re

# TODO: comments and descriptions
# TODO: maybe standard library methods to do this?
# TODO: replace ValueErrors with meaningful exception classes when integrating
# or make something like DataImportError(), whatever

def sign(x):
    return 1 if x>=0 else -1

def rad2deg(x):
    return 180*x/pi

def cord_conv(t, RX, RY, RZ):
    r   = sqrt(RX**2 + RY**2 + RZ**2)
    phi = pi/2 - acos(RZ/r)
    rho = acos(RX/(r*sin(pi/2 - phi))) * sign(RY)
    # TODO: do we need to save rx,ry,rz too?
    # TODO: do we need a dict/named tuple here?
    # Time, Vector from origin, Longitude, Latitude, "is autogenerated?"
    return ( t, r, rad2deg(rho), rad2deg(phi), 0 )

def file_catalog(fp):
    # We have a bit of a decision here:
    # 1. Read the file in one try reading each compontent into an in memory list
    # 2. Read one point per time, but seek all over the file
    # I'm going with route #2 for now, no particular reason, just think it will be more elegant in code

    # Pointers to the current reading positions in the file per section
    sections_index = { "RX": -1 , "RY": -1, "RZ": -1 }

    # Regular expression to match the sections above
    sections_rx = "^@(%s)" % "|".join(sections_index)

    # Populating the index
    while True: # Unable to use tell() with for interatin
        ln = fp.readline()
        if ln == "":
            break
        m = re.search(sections_rx, ln)
        if m:
            sect = m.group(1)
            if sections_index[sect] > 0:
                raise ValueError("Duplicate section detected")
            sections_index[sect] = fp.tell()

    # Checking if we found all the sections
    if any((pos < 0 for _,pos in sections_index.items())):
        raise ValueError("Some sections missing from input")

    def scan_sect(sect):
        while True:
            # Come back to the saved position
            fp.seek(sections_index[sect])

            # Read a line, exit the iteration if it's the end of input
            ln = fp.readline()
            if ln.rstrip() == "":
                break

            # Record the new position
            sections_index[sect] = fp.tell()

            # Try to parse the data
            # NOTE: expected format: <timestamp> <float value(.)> <human readable date>, ignoring the last one
            m = re.search("^([0-9]*) ([0-9.-]*)", ln)
            if m:
                # Yielding a nested tuple e.g. ( "RX", (1, 432.0) ), will be converted to dict
                yield ( sect, (int(m.group(1)), float(m.group(2))) )
            else:
                raise ValueError("Input inconsistency detected")

    def scan_point():
        # Generator objects for all the sections
        sect_gens = [scan_sect(sect) for sect in sections_index]
        try:
            while True:
                # Try reading the next point into a list, check if times are consistent
                nextpoint = [next(g) for g in sect_gens]
                timemark = nextpoint[0][1][0] # may throw an exception if len(nextpoint) == 0 for some reason

                if any(( pt[1][0] != timemark for pt in nextpoint )):
                    raise ValueError("Timemarks not consistent across sections evaluated")

                # Convert to dictionary and remove redundant timemarks
                nextpoint = dict(nextpoint)
                for k,v in nextpoint.items():
                    nextpoint[k] = v[1]
                nextpoint["t"] = timemark

                yield cord_conv(**nextpoint)
        except StopIteration:
            pass

        # TODO: for super consistency, try advacing the rest of generators and
        # make sure all of them raise StopIteration or something?

    # Call the machinery above
    for pt in scan_point():
        yield pt

# Very temporary countermeasure for IonosatMicro/ionosat-docs#7, linear approximation
# 2 points at the ends of the slice considered real values, intermediate ones filled in
def orbit_fill_linear(pts):
    delta = tuple(pts[-1][j] - pts[0][j] for j in range(4))
    timestart = pts[0][0]
    for i in range(1, len(pts)-1):
        dt = pts[i][0] - timestart
        # NOTE: Floating point division in Python3
        pts[i] = (pts[i][0], *(pts[0][j]+dt*delta[j]/delta[0] for j in range(1,4)), 1)

    # TODO: rtfm, why the slice is a copy
    return pts

# Testing code below, will be removed
datapoints = None
with open("/tmp/tm200542.135.txt") as fp:
    datapoints = [ pt for pt in file_catalog(fp)]

# Really lazy code here, sorry
last_seen = (datapoints[0][2], datapoints[0][3])
last_idx = 0
for i in range(1,len(datapoints)):
    v = (datapoints[i][2], datapoints[i][3])
    if v != last_seen:
        # Check if streak is big enough
        if i-last_idx > 1:
            datapoints[last_idx:i+1] = orbit_fill_linear(datapoints[last_idx:i+1])
        # Save new values
        last_idx = i
        last_seen = v

print("t, r, lon, lat, is.estimated")
for pt in datapoints:
    print(",".join(str(i) for i in pt))
